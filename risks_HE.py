import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO

st.set_page_config(page_title="MetaboScores", layout="wide")
st.title("üìä –†–∞—Å—á—ë—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫–æ—Ä–∞ –ø–æ –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏–º –æ—Å—è–º (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ—Å–∏)")

st.markdown("""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel c —Ä–∏—Å–∫–∞–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (—Å—Ç–æ–ª–±–µ—Ü **¬´–ö–æ–¥¬ª** + —Å—Ç–æ–ª–±—Ü—ã –æ—Å–µ–π).  
–í–µ—Å–∞ –æ—Å–µ–π –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —Å–ª–∞–π–¥–µ—Ä–∞–º–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.
""")

# ------------------ –í–°–¢–†–û–ï–ù–ù–´–ï –û–°–ò –ò –î–ï–§–û–õ–¢–ù–´–ï –í–ï–°–ê ------------------
AXES_DEFAULTS = {
    "–í–æ—Å–ø–∞–ª–µ–Ω–∏–µ –∏ –∏–º–º—É–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è": 0.10,
    "–ó–¥–æ—Ä–æ–≤—å–µ –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–π": 0.10,
    "–ú–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∏ —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å": 0.10,
    "–ú–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è": 0.10,
    "–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–ª–∏—Ñ–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤": 0.0,
    "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã": 0.10,
    "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º–º—É–Ω–Ω–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞": 0.10,
    "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã": 0.10,
    "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—á–µ–Ω–∏": 0.01,
    "–°—Ç–∞—Ç—É—Å –º–∏–∫—Ä–æ–±–∏–æ—Ç—ã": 0.01,
    "–¶–∏–∫–ª –ö—Ä–µ–±—Å–∞ –∏ –±–∞–ª–∞–Ω—Å –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç": 0.01,
}

# --------- –§–ê–ô–õ –° –†–ò–°–ö–ê–ú–ò ---------
risks_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∏—Å–∫–∞–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (Excel, .xlsx)", type=["xlsx"])

# --------- SIDEBAR: –ù–ê–°–¢–†–û–ô–ö–ê –í–ï–°–û–í ---------
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –æ—Å–µ–π")
st.sidebar.caption("–î–∏–∞–ø–∞–∑–æ–Ω –∫–∞–∂–¥–æ–≥–æ –≤–µ—Å–∞: 0.01 ‚Äì 0.50")

MIN_W, MAX_W, STEP_W = 0.01, 0.50, 0.01

# –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî —Å—Ç–µ–ø–µ–Ω—å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è value < 7
st.sidebar.markdown("---")
alpha = st.sidebar.number_input(
    "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ –ø—Ä–∏ value < 7",
    min_value=1.0,
    max_value=3.0,
    value=1.7,
    step=0.1,
    format="%.1f",
    help="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º—É–ª–µ (1 - (x ** Œ±)) –ø—Ä–∏ value < 7"
)
st.sidebar.markdown("---")
# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if "weights_state" not in st.session_state:
    st.session_state["weights_state"] = AXES_DEFAULTS.copy()

# —Å–ª–∞–π–¥–µ—Ä—ã –≤–µ—Å–æ–≤
for axis in AXES_DEFAULTS.keys():
    st.session_state["weights_state"][axis] = st.sidebar.slider(
        axis,
        min_value=float(MIN_W),
        max_value=float(MAX_W),
        value=float(st.session_state["weights_state"][axis]),
        step=float(STEP_W),
        key=f"slider_{axis}"
    )

weights_series = pd.Series(st.session_state["weights_state"], name="Weight")
weights_sum = float(weights_series.sum())
st.sidebar.metric("Œ£ –°—É–º–º–∞ –≤–µ—Å–æ–≤", f"{weights_sum:.2f}")


# –∫–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
if st.sidebar.button("‚Ü©Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"):
    for k, v in AXES_DEFAULTS.items():
        st.session_state["weights_state"][k] = v
        st.session_state[f"slider_{k}"] = v
    st.rerun()

# --------- –ß–¢–ï–ù–ò–ï –†–ò–°–ö–û–í –ò –†–ê–°–ß–Å–¢ ---------
def read_risks(file):
    # —É–∫–∞–∂–µ–º –¥–≤–∏–∂–æ–∫ —è–≤–Ω–æ –Ω–∞ —Å–ª—É—á–∞–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    return pd.read_excel(file, engine="openpyxl")

if risks_file is not None:
    try:
        df = read_risks(risks_file)
        if "–ö–æ–¥" not in df.columns:
            st.error("–í –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü ¬´–ö–æ–¥¬ª.")
            st.stop()

        # –∫–∞–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã —Å—á–∏—Ç–∞–µ–º –æ—Å—è–º–∏
        risk_groups = [c for c in df.columns if c not in ("–ö–æ–¥", "–ü–∞—Ü–∏–µ–Ω—Ç")]

        # –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏
        missing_in_file = [ax for ax in AXES_DEFAULTS if ax not in df.columns]
        extra_in_file = [c for c in risk_groups if c not in AXES_DEFAULTS]
        if missing_in_file:
            st.warning("–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –æ—Å–∏ (–±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã –≤ —Ä–∞—Å—á—ë—Ç–µ): " + ", ".join(missing_in_file))
        if extra_in_file:
            st.info("–í —Ñ–∞–π–ª–µ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã, –Ω–µ –≤—Ö–æ–¥—è—â–∏–µ –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Å–µ–π (–±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã): " + ", ".join(extra_in_file))

        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
        risk_groups = [r for r in risk_groups if r in AXES_DEFAULTS]

        # —Ä–∞—Å—á—ë—Ç
        final_scores = []
        for i, code in enumerate(df["–ö–æ–¥"].values):
            summ_score = 0.0
            for risk in risk_groups:
                value = pd.to_numeric(df.loc[i, risk], errors="coerce")
                if pd.isna(value):
                    continue
                w = float(weights_series.loc[risk])
                x = value / 10.0
                # —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ –ø–æ—Ä–æ–≥–æ–≤: <7 ‚Äî —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞ 1.7; –∏–Ω–∞—á–µ –ª–∏–Ω–µ–π–Ω–æ
                a = w * (1 - (x**alpha)) if value < 7 else w * (1 - x)

                summ_score += a
            final_score = round(min(5.0, 5.0 * summ_score), 1)
            final_scores.append(final_score)

        result_df = pd.DataFrame({
            "–ü–∞—Ü–∏–µ–Ω—Ç": df["–ö–æ–¥"].values,
            "–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä": final_scores
        })

        st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        c1, c2 = st.columns(2)
        #with c1:
        #    st.metric("Œ£ –°—É–º–º–∞ –≤–µ—Å–æ–≤ (—Ç–µ–∫—É—â–∏–µ)", f"{weights_sum:.2f}")
        #with c2:
        #    st.metric("–°—Ä–µ–¥–Ω–∏–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä", f"{np.mean(final_scores):.2f}")

        st.dataframe(result_df, use_container_width=True)

        # --------- –≠–ö–°–ü–û–†–¢ ---------
        @st.cache_data
        def to_csv(df_out: pd.DataFrame) -> bytes:
            return df_out.to_csv(index=False).encode("utf-8")

        @st.cache_data
        def to_xlsx(df_out: pd.DataFrame, weights_out: pd.Series) -> bytes:
            bio = BytesIO()
            with pd.ExcelWriter(bio, engine="openpyxl") as writer:
                df_out.to_excel(writer, index=False, sheet_name="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                wdf = weights_out.rename("Weight").to_frame()
                wdf.to_excel(writer, sheet_name="–í–µ—Å–∞ (—Ç–µ–∫—É—â–∏–µ)")
            return bio.getvalue()

        csv_bytes = to_csv(result_df)
        xlsx_bytes = to_xlsx(result_df, weights_series)

        d1, d2 = st.columns(2)
        #with d1:
        #    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (CSV)", data=csv_bytes,
        #                       file_name="final_scores.csv", mime="text/csv")
        with d2:
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (Excel)", data=xlsx_bytes,
                               file_name="final_scores.xlsx",
                               mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Ä–∏—Å–∫–æ–≤: {e}")
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Å —Ä–∏—Å–∫–∞–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –∑–∞—Ç–µ–º –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–µ—Å–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
